init_by_lua_block {
	local resty_lrucache = require "resty.lrucache"
	local err
	lrucache, err = resty_lrucache.new(1)  -- allow up to 200 items in the cache
	if not lrucache then
		error("failed to create the cache: " .. (err or "unknown"))
	end
	
	cjson = require "cjson"
	
	conf_upstream_host = os.getenv("UPSTREAM_HOST")
	conf_upstream_port = os.getenv("UPSTREAM_PORT")
	conf_extract_host_from_arp_pattern = os.getenv("EXTRACT_HOST_FROM_ERP_PATTERN")
}

resolver 127.0.0.11 ipv6=off valid=5s;

server {
	listen 9554;
	server_name _;

	location / {
		client_max_body_size 64k;
		client_body_buffer_size 64k;
		
		set $destination_host "";
		set $destination_port "";
	
		access_by_lua_block {
			local answers = lrucache:get("dns_answers")
			if answers == nil then
				local resolver = require "resty.dns.resolver"
			
				local r, err = resolver:new{
					nameservers = {"127.0.0.11"},
					retrans = 3,  -- 3 retransmissions on receive timeout
					timeout = 2000,  -- 2 sec
				}

				if not r then
					ngx.status = 410
					ngx.say("failed to instantiate the resolver: ", err)
					ngx.exit(ngx.OK)
				end

				local tmp_answers, err, tries = r:query(conf_upstream_host, { qtype = r.TYPE_A }, {})
				if not tmp_answers then
					ngx.status = 410
					ngx.say("failed to query the DNS server: ", err)
					ngx.say("retry histories:\n  ", table.concat(tries, "\n  "))
					ngx.exit(ngx.OK)
				end

				if tmp_answers.errcode then
					ngx.status = 410
					ngx.say("server returned error code: ", tmp_answers.errcode,
							": ", tmp_answers.errstr)
					ngx.exit(ngx.OK)
				end
				
				lrucache:set("qdb_dns_answers", tmp_answers, 5)
				answers = tmp_answers
			end
			
			ngx.var.destination_host = ""
			if ngx.var.cookie_proxy_selected_backend ~= nil then
				for i, ans in ipairs(answers) do
					if ans.address == ngx.var.cookie_proxy_selected_backend then
						ngx.var.destination_host = ans.address
						local host = lrucache:get("host_" .. ans.address)                                                                 
						if host == nil then                                                                                              
							local resolver = require "resty.dns.resolver"                                                           
							local r, err = resolver:new{                                                                            
								nameservers = {"127.0.0.11"},                                                                   
								retrans = 3,  -- 3 retransmissions on receive timeout                                           
								timeout = 2000,  -- 2 sec                                                                       
							}
							
							if not r then
								ngx.status = 410
								ngx.say("failed to instantiate the resolver: ", err)
								ngx.exit(ngx.OK)
							end
							
							local answers, err = r:reverse_query(ans.address)
							
							if not answers then
								ngx.status = 410
								ngx.say("failed to reverse query the DNS server: ", err)
								ngx.exit(ngx.OK)
							end
							
							if conf_extract_host_from_arp_pattern ~= nil then
								host = string.match(answers[1].ptrdname, conf_extract_host_from_arp_pattern)
							else
								host = answers[1].ptrdname
							end
							lrucache:set("host_" .. ans.address, host, 600)                                                           
						end
						ngx.req.set_header("Host", host)
					end
				end
			end
			
			if ngx.var.destination_host == "" then
				local selection = "<select style=\"font-family:monospace;font-size:30px;color:#555\" onchange=\"document.cookie='proxy_selected_backend=' + this.value\"><option>Select a backend and then reload!</option>"
				for i, ans in ipairs(answers) do
					selection = selection .. "<option value='" .. ans.address .. "'>" .. ans.address .. "</option>"
				end
				selection = selection .. "</select>"
				ngx.header["Content-type"] = "text/html"
				ngx.say("<html><table width=\"100%\" height=\"100%\"><td width=\"100%\" height=\"100%\" style=\"vertical-align:middle;text-align:center;font-family:monospace;\">" .. selection .. "<p><em>Note: delete the cookie <b>proxy_selected_backend</b> to back to this page!</em></p></html>")
				ngx.exit(ngx.OK)
			end
			
			ngx.var.destination_port = conf_upstream_port
		}
		
		proxy_pass http://$destination_host:$destination_port;
	}
}