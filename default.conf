init_by_lua_block {
	local resty_lrucache = require "resty.lrucache"
	local err
	lrucache, err = resty_lrucache.new(1)  -- allow up to 200 items in the cache
	if not lrucache then
		error("failed to create the cache: " .. (err or "unknown"))
	end
	
	cjson = require "cjson"
}

resolver 127.0.0.11 ipv6=off valid=5s;

server {
	listen 9554;
	server_name _;

	location / {
		client_max_body_size 64k;
		client_body_buffer_size 64k;
		
		set $destination_host "";
		set $destination_port "";
	
		access_by_lua_block {
			local upstream_host = ngx.var.http_x_selectable_upstream_host
			local upstream_port = ngx.var.http_x_selectable_upstream_port
			
			if upstream_host == nil or upstream_port == nil then
				ngx.status = 410
				ngx.log(ngx.ERR, "X-Selectable-Upstream-Host and X-Selectable-Uptream-Port must not be null!")
				ngx.say("Error!")
				ngx.exit(ngx.OK)
			end
			
			local host_pattern = ngx.var.http_x_selectable_host_pattern
			local answers = lrucache:get("dns_answers" .. upstream_host)
			local r = nil
			
			if answers == nil then
				if r == nil then
					local resolver = require "resty.dns.resolver"
				
					local err = nil
					r, err = resolver:new{
						nameservers = {"127.0.0.11"},
						retrans = 3,  -- 3 retransmissions on receive timeout
						timeout = 2000,  -- 2 sec
					}

					if not r then
						ngx.status = 410
						ngx.log(ngx.ERR, "failed to instantiate the resolver: ", err)
						ngx.say("Error!")
						ngx.exit(ngx.OK)
					end
				end

				local tmp_answers, err, tries = r:query(upstream_host, { qtype = r.TYPE_A }, {})
				if not tmp_answers then
					ngx.status = 410
					ngx.log(ngx.ERR, "failed to query the DNS server: ", err)
					ngx.log(ngx.ERR, "retry histories:\n  ", table.concat(tries, "\n  "))
					ngx.say("Error!")
					ngx.exit(ngx.OK)
				end

				if tmp_answers.errcode then
					ngx.status = 410
					ngx.log(ngx.ERR, "server returned error code: ", tmp_answers.errcode,
							": ", tmp_answers.errstr)
					ngx.say("Error!")
					ngx.exit(ngx.OK)
				end
				
				lrucache:set("dns_answers", tmp_answers, 5)
				answers = tmp_answers
			end
			
			ngx.var.destination_host = ""
			if ngx.var.cookie__proxy_selected_backend ~= nil then
				for i, ans in ipairs(answers) do
					if ans.address == ngx.var.cookie__proxy_selected_backend then
						ngx.var.destination_host = ans.address
						local host = lrucache:get("host_" .. ans.address)                                                                 
						if host == nil then  
							if r == nil then
								local resolver = require "resty.dns.resolver"                                                           
								local err = nil
								r, err = resolver:new{                                                                            
									nameservers = {"127.0.0.11"},                                                                   
									retrans = 3,  -- 3 retransmissions on receive timeout                                           
									timeout = 2000,  -- 2 sec                                                                       
								}
								
								if not r then
									ngx.status = 410
									ngx.log(ngx.ERR, "failed to instantiate the resolver: ", err)
									ngx.say("Error!")
									ngx.exit(ngx.OK)
								end
							end
							
							local tmp_answers, err = r:reverse_query(ans.address)
							
							if not tmp_answers then
								ngx.status = 410
								ngx.log(ngx.ERR, "failed to reverse query the DNS server: ", err)
								ngx.say("Error!")
								ngx.exit(ngx.OK)
							end
							
							if host_pattern ~= nil then
								host = string.match(tmp_answers[1].ptrdname, host_pattern)
							else
								host = tmp_answers[1].ptrdname
							end
							lrucache:set("host_" .. ans.address, host, 600)
						end
						ngx.req.set_header("Host", host)
					end
				end
			end
			
			if ngx.var.destination_host == "" then
				local selection = "<select style=\"font-family:monospace;font-size:30px;color:#555\" onchange=\"document.cookie='_proxy_selected_backend=' + this.value; document.cookie='_proxy_selected_backend_hostname=' + this.options[this.selectedIndex].getAttribute('hostname')\"><option>Select a backend and then reload!</option>"
				for i, ans in ipairs(answers) do
					if r == nil then
						local resolver = require "resty.dns.resolver"                                                           
						local err = nil
						r, err = resolver:new{                                                                            
							nameservers = {"127.0.0.11"},                                                                   
							retrans = 3,  -- 3 retransmissions on receive timeout                                           
							timeout = 2000,  -- 2 sec                                                                       
						}
						
						if not r then
							ngx.status = 410
							ngx.log(ngx.ERR, "failed to instantiate the resolver: ", err)
							ngx.say("Error!")
							ngx.exit(ngx.OK)
						end
					end
					
					local tmp_answers, err = r:reverse_query(ans.address)
					
					local host = ""
					if tmp_answers then
						if host_pattern ~= nil then
							host = string.match(tmp_answers[1].ptrdname, host_pattern)
							
							if host == nil then
								host = "null"
							end
						else
							host = tmp_answers[1].ptrdname
						end
						lrucache:set("host_" .. ans.address, host, 600)
					end
					selection = selection .. "<option value='" .. ans.address .. "' hostname=" .. host .. ">" .. ans.address .. " - " .. host .. "</option>"
				end
				selection = selection .. "</select>"
				ngx.header["Content-type"] = "text/html"
				ngx.say("<html><table width=\"100%\" height=\"100%\"><td width=\"100%\" height=\"100%\" style=\"vertical-align:middle;text-align:center;font-family:monospace;\">" .. selection .. "<p><em>Note: delete the cookie <b>_proxy_selected_backend</b> to back to this page!</em></p></html>")
				ngx.exit(ngx.OK)
			end
			
			ngx.var.destination_port = upstream_port
		}
		
		proxy_set_header Host $http_host;
		proxy_pass http://$destination_host:$destination_port;
	}
}